// Code generated by "requestgen -type PlaceOrderRequest ./example/api"; DO NOT EDIT.

package api

func (p *PlaceOrderRequest) ClientOrderID(clientOrderID string) *PlaceOrderRequest {
	p.clientOrderID = &clientOrderID
	return p
}

func (p *PlaceOrderRequest) Symbol(symbol string) *PlaceOrderRequest {
	p.symbol = symbol
	return p
}

func (p *PlaceOrderRequest) Tag(tag string) *PlaceOrderRequest {
	p.tag = &tag
	return p
}

func (p *PlaceOrderRequest) Side(side SideType) *PlaceOrderRequest {
	p.side = side
	return p
}

func (p *PlaceOrderRequest) OrdType(ordType OrderType) *PlaceOrderRequest {
	p.ordType = ordType
	return p
}

func (p *PlaceOrderRequest) Size(size string) *PlaceOrderRequest {
	p.size = size
	return p
}

func (p *PlaceOrderRequest) Price(price string) *PlaceOrderRequest {
	p.price = &price
	return p
}

func (p *PlaceOrderRequest) TimeInForce(timeInForce TimeInForceType) *PlaceOrderRequest {
	p.timeInForce = &timeInForce
	return p
}

func (p *PlaceOrderRequest) ComplexArg(complexArg ComplexArg) *PlaceOrderRequest {
	p.complexArg = complexArg
	return p
}

func (p *PlaceOrderRequest) getParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	if p.clientOrderID != nil {
		params["clientOid"] = *p.clientOrderID
	}
	params["symbol"] = p.symbol
	if p.tag != nil {
		params["tag"] = *p.tag
	}
	a := p.side
	switch a {
	case "buy", "sell":
		params["side"] = a

	default:
		return params, fmt.Errorf("side value %v is not valid", a)

	}
	a := p.ordType
	switch a {
	case "limit", "market":
		params["ordType"] = a

	default:
		return params, fmt.Errorf("ordType value %v is not valid", a)

	}
	params["size"] = p.size
	if p.price != nil {
		params["price"] = *p.price
	}
	if p.timeInForce != nil {
		a := *p.timeInForce
		switch a {
		case "GTC", "GTT", "FOK":
			params["timeInForce"] = a

		default:
			return params, fmt.Errorf("timeInForce value %v is not valid", a)

		}
	}
	params["complexArg"] = p.complexArg
	return params, nil
}
