// Code generated by "requestgen -type PlaceOrderRequest -debug ./example/api"; DO NOT EDIT.

package api

import (
	"fmt"
	"net/url"
	"strconv"
	"time"
)

func (p *PlaceOrderRequest) ClientOrderID(clientOrderID string) *PlaceOrderRequest {
	p.clientOrderID = &clientOrderID
	return p
}

func (p *PlaceOrderRequest) Symbol(symbol string) *PlaceOrderRequest {
	p.symbol = symbol
	return p
}

func (p *PlaceOrderRequest) Tag(tag string) *PlaceOrderRequest {
	p.tag = &tag
	return p
}

func (p *PlaceOrderRequest) Side(side SideType) *PlaceOrderRequest {
	p.side = side
	return p
}

func (p *PlaceOrderRequest) OrdType(ordType OrderType) *PlaceOrderRequest {
	p.ordType = ordType
	return p
}

func (p *PlaceOrderRequest) Size(size string) *PlaceOrderRequest {
	p.size = size
	return p
}

func (p *PlaceOrderRequest) Price(price string) *PlaceOrderRequest {
	p.price = &price
	return p
}

func (p *PlaceOrderRequest) TimeInForce(timeInForce TimeInForceType) *PlaceOrderRequest {
	p.timeInForce = &timeInForce
	return p
}

func (p *PlaceOrderRequest) ComplexArg(complexArg ComplexArg) *PlaceOrderRequest {
	p.complexArg = complexArg
	return p
}

func (p *PlaceOrderRequest) StartTime(startTime time.Time) *PlaceOrderRequest {
	p.startTime = &startTime
	return p
}

func (p *PlaceOrderRequest) getParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	// check clientOrderID field -> json key clientOid
	if p.clientOrderID != nil {
		clientOrderID := *p.clientOrderID

		if len(clientOrderID) == 0 {
			return params, fmt.Errorf("clientOid is required, empty string given")
		}

		params["clientOid"] = clientOrderID
	}

	// check symbol field -> json key symbol
	symbol := p.symbol

	if len(symbol) == 0 {
		return params, fmt.Errorf("symbol is required, empty string given")
	}

	params["symbol"] = symbol

	// check tag field -> json key tag
	if p.tag != nil {
		tag := *p.tag

		params["tag"] = tag
	}

	// check side field -> json key side
	side := p.side

	if len(side) == 0 {
		return params, fmt.Errorf("side is required, empty string given")
	}

	switch side {
	case "buy", "sell":
		params["side"] = side

	default:
		return params, fmt.Errorf("side value %v is invalid", side)

	}

	params["side"] = side

	// check ordType field -> json key ordType
	ordType := p.ordType

	switch ordType {
	case "limit", "market":
		params["ordType"] = ordType

	default:
		return params, fmt.Errorf("ordType value %v is invalid", ordType)

	}

	params["ordType"] = ordType

	// check size field -> json key size
	size := p.size

	params["size"] = size

	// check price field -> json key price
	if p.price != nil {
		price := *p.price

		params["price"] = price
	}

	// check timeInForce field -> json key timeInForce
	if p.timeInForce != nil {
		timeInForce := *p.timeInForce

		switch timeInForce {
		case "GTC", "GTT", "FOK":
			params["timeInForce"] = timeInForce

		default:
			return params, fmt.Errorf("timeInForce value %v is invalid", timeInForce)

		}

		params["timeInForce"] = timeInForce
	}

	// check complexArg field -> json key complexArg
	complexArg := p.complexArg

	params["complexArg"] = complexArg

	// check startTime field -> json key startTime
	if p.startTime != nil {
		startTime := *p.startTime

		// convert time.Time to milliseconds time
		params["startTime"] = strconv.FormatInt(startTime.UnixNano()/int64(time.Millisecond), 10)
	}
	return params, nil
}

func (p *PlaceOrderRequest) getQuery() (url.Values, error) {
	query := url.Values{}

	params, err := p.getParameters()
	if err != nil {
		return query, err
	}

	for k, v := range params {
		query.Add(k, fmt.Sprintf("%v", v))
	}

	return query, nil
}
